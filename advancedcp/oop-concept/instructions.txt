Part 1 — Inheritance
Activity 1: Animal Inheritance

Instructions:
Create a base class Animal with a speak() method. Then, create subclasses Dog and Cat that inherit from Animal and give their own version of speak().Question:

1. What concept of OOP is used here?
2. What is the output of the program?

Activity 2: Vehicle Class
Instructions:
Create a Vehicle class with attributes brand and fuel. Then create a Car subclass that adds an attribute doors and a drive() method to consume fuel. 
Question:

1. What function is used to call the parent class constructor? 
2.eWhy do we use inheritance here? 

Part 2 — Encapsulation
Activity 1: Bank Account

Instructions:
Create a BankAccount class that has a private balance (__balance). Add methods to deposit, withdraw, and get the balance.

Questions:
1. Why is the __balance variable private? 
2. What happens if someone tries to access account.__balance directly?

Activity 2: Age Validation
Instructions:
Create a class Person that uses @property to manage and validate an age attribute (must be a positive integer).

Question:
1. What Python feature is used to safely access and modify data? 
2. Give one benefit of encapsulation:

Part 3 — Polymorphism
Activity 1: Printers

Instructions:
Create two classes InkPrinter and LaserPrinter. Both should have a method print_document() that behaves differently for each.

Questions:
1. What does “polymorphism” mean in OOP?
2. How is polymorphism shown in this example? 

Activity 2: Duck Typing
Instructions:
Write a function make_it_speak(obj) that will call speak() on any object that has it.
Create two classes Bird and Robot, both having a speak() method.

Questions:
1. What does "duck typing" mean in Python?
2. What will happen if you call make_it_speak(123)? 

Part 4 — Abstraction

Activity 1: Shape Area
Instructions:
Create an abstract base class Shape with an abstract method area().
Then create subclasses Circle and Rectangle that implement the area() method.

Questions:
1. What is the purpose of using abstract classes?
2. Can you create an object directly from Shape? Why or why not? 

Activity 2: Employee Payment
Instructions:
Create an abstract class Employee with an abstract method calculate_pay().
Then create HourlyEmployee and SalariedEmployee subclasses that implement it.

Questions:
1. What is abstraction used for in OOP?
2. Which method forces child classes to define their own version?
